import { Component, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { PokeServiceService } from 'src/app/services/poke-service.service';
import { Router } from '@angular/router';
import { CurrentPokemonService } from 'src/app/services/current-pokemon.service';

@Component({
  selector: 'app-pokelist',
  templateUrl: './pokelist.component.html',
  styleUrls: ['./pokelist.component.css']
})
export class PokelistComponent implements OnInit, OnChanges, OnDestroy {

  /*my work so far:
  I created a pokeservice that has an httpclient which has retrieved all pokemon from the api
  I create a pokelist that, when initialized, adds all of the pokemon to an array
  the array is intended to contain json objects (pokemon)
  It does this with the .subscribe function, which requires a arrow function callback to tell the httpclient
  how to handle the entries that were retrieved from the rest call
  In the pokelist html, I iterated through the pokemon array and add a new <p> for every pokemon name
  I added the pokelist component into the pokesearch page/component
  I added the pokesearch component to routing
  I added a navbar and router outlet to the bootstrapped component (app.component)
  */

  // what I want:
  // I want a list of pokemon that is dynamically updated every time pokeName is updated by the pokeSearch page
  // in order to do this, I need that same list of pokemon, but I need to retain the master list
  // I need to use ngOnChanges to run my instructions when @input changes
  // I want the list of filtered pokemon to appear on the html
  pokeArr : Array<any> = [];
  // pokeTemp is a version of pokeArr that is filtered by name
  pokeTemp: Array<any> = [];

  constructor(private pokeServ: PokeServiceService, private router: Router, private currentPokeServe: CurrentPokemonService) { }

  @Input()
  pokeName:string = "";

  myPoke:any="";

  ngOnInit(): void {
    this.pokeServ.getAllPokemon().subscribe(list => {
      this.pokeArr = list.results;
      console.log(this.pokeArr);
    })
  }
  /*
  subscribing in this way is similar to say
  loadResults(list:any){

  }

  */
  ngOnChanges():void{
    // I need to filter pokeArr
    // I need to recognize that pokeArr contains JSON pokemon and need to create a filtering
    // arrow function that only accepts pokemon that contain my input as a substring
    // to do this i use .filter() and .includes

    // what we're saying:
    // for each element of pokeArr (the element being pokemon:any), only accept if it satisfies
    // the boolean condition generated by .includes
    // so: yes if the name includes pokeName
    this.pokeTemp = this.pokeArr.filter((pokemon:any) => pokemon.name.includes(this.pokeName));
  }
  ngOnDestroy():void{

  }
  goToDetails(event: any){
    // i set the service name to the current pokemon name
    this.currentPokeServe.setName(event.target.innerText.toLowerCase());
    // i found the pokemon object based on the current name
    this.myPoke=this.pokeArr.find((pokemon:any)=> pokemon.name===event.target.innerText.toLowerCase());
    // i found the url from the pokemon object and gave it to the service
    this.currentPokeServe.setUrl(this.myPoke.url);
    // i navigated to the details page which will then access the service
    this.router.navigate(['/details']);

  }
}